name: Pipeline Test - Shipnet 2.0

on:
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test Level'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - full
        - frontend-only
        - backend-only

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  NX_CONSOLE_NO_INSTALL_PROMPT: 'true'
  NX_REJECT_UNKNOWN_LOCAL_CACHE: '0'

jobs:
  # Job 1: Project Structure Validation
  structure-validation:
    name: Validate Project Structure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Validate backend structure
      run: |
        echo "🔍 Validating backend structure..."
        test -f backend/ShipnetFunctionApp/ShipnetFunctionApp.csproj && echo "✅ Backend project found" || echo "❌ Backend project missing"
        test -f backend/ShipnetFunctionApp/host.json && echo "✅ Azure Functions host.json found" || echo "❌ host.json missing"
        test -d backend/ShipnetFunctionApp/Api && echo "✅ API directory found" || echo "❌ API directory missing"
        
    - name: Validate frontend structure  
      run: |
        echo "🔍 Validating frontend structure..."
        test -f frontend/package.json && echo "✅ Frontend package.json found" || echo "❌ Frontend package.json missing"
        test -f frontend/nx.json && echo "✅ Nx configuration found" || echo "❌ Nx configuration missing"
        
        # Check for all expected apps
        apps=("chartering" "registers" "home" "accounting" "voyagemanager" "auth")
        for app in "${apps[@]}"; do
          if test -d "frontend/apps/$app"; then
            echo "✅ App '$app' found"
          else
            echo "❌ App '$app' missing"
          fi
        done
        
    - name: List all apps and their configurations
      run: |
        echo "📱 Frontend Apps Structure:"
        ls -la frontend/apps/
        
        echo "📋 Package.json scripts:"
        jq -r '.scripts | to_entries[] | "- \(.key): \(.value)"' frontend/package.json

  # Job 2: Quick Build Test (Backend)
  backend-quick-test:
    name: Backend Quick Build Test
    runs-on: ubuntu-latest
    if: inputs.test_level == 'basic' || inputs.test_level == 'full' || inputs.test_level == 'backend-only'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Test restore
      run: dotnet restore
      working-directory: ./backend/ShipnetFunctionApp
      
    - name: Test build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend/ShipnetFunctionApp

  # Job 3: Quick Build Test (Frontend)
  frontend-quick-test:
    name: Frontend Quick Build Test
    runs-on: ubuntu-latest
    if: inputs.test_level == 'basic' || inputs.test_level == 'full' || inputs.test_level == 'frontend-only'
    
    strategy:
      matrix:
        app: [chartering, registers, home, accounting, voyagemanager, auth]
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
          
    - name: Install dependencies
      run: |
        npm ci
        cd frontend
        npm ci
        
    - name: Test ${{ matrix.app }} build
      run: |
        echo "🔨 Testing build for ${{ matrix.app }}..."
        if npx nx show project ${{ matrix.app }} >/dev/null 2>&1; then
          echo "✅ Project ${{ matrix.app }} exists in Nx workspace"
          npx nx build ${{ matrix.app }} --configuration=development || echo "⚠️ Build failed for ${{ matrix.app }}"
        else
          echo "❌ Project ${{ matrix.app }} not found in Nx workspace"
        fi
      working-directory: ./frontend

  # Job 4: Dependencies Check
  dependencies-check:
    name: Dependencies & Security Check
    runs-on: ubuntu-latest
    if: inputs.test_level == 'full'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Check root dependencies
      run: |
        echo "📦 Root package dependencies:"
        npm audit --audit-level=high || true
        
    - name: Check frontend dependencies
      run: |
        echo "📦 Frontend workspace dependencies:"
        cd frontend
        npm audit --audit-level=high || true
        
    - name: Check for outdated packages
      run: |
        echo "📊 Outdated packages check:"
        npm outdated || true
        cd frontend
        npm outdated || true

  # Job 5: Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [structure-validation, backend-quick-test, frontend-quick-test, dependencies-check]
    if: always()
    
    steps:
    - name: Generate test summary
      run: |
        echo "# 🧪 Pipeline Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test Level:** ${{ inputs.test_level }}" >> $GITHUB_STEP_SUMMARY
        echo "**Test Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Results Overview" >> $GITHUB_STEP_SUMMARY
        echo "- Structure Validation: ${{ needs.structure-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Backend Quick Test: ${{ needs.backend-quick-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend Quick Test: ${{ needs.frontend-quick-test.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies Check: ${{ needs.dependencies-check.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.structure-validation.result }}" == "success" ]]; then
          echo "✅ **Project structure is valid and ready for CI/CD pipelines!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Project structure issues detected. Please review before using CI/CD pipelines.**" >> $GITHUB_STEP_SUMMARY
        fi