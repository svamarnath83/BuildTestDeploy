name: CI Pipeline - Shipnet 2.0

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend-only
          - frontend-only
          - security-only
      skip_integration_tests:
        description: 'Skip integration tests (faster execution)'
        required: false
        default: false
        type: boolean

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  NX_CONSOLE_NO_INSTALL_PROMPT: 'true'
  NX_REJECT_UNKNOWN_LOCAL_CACHE: '0'

jobs:
  # Job 1: Build and Test Backend (.NET Functions)
  backend-ci:
    name: Backend CI - .NET Functions
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'backend-only' || github.event.inputs.test_scope == '' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend/ShipnetFunctionApp
      
    - name: Build backend
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend/ShipnetFunctionApp
      
    - name: Run backend tests
      run: dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage"
      working-directory: ./backend/ShipnetFunctionApp
      continue-on-error: true
      
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: |
          backend/ShipnetFunctionApp/bin/Release/
          backend/ShipnetFunctionApp/obj/Release/
        retention-days: 1

  # Job 2: Build and Test Frontend (Next.js Apps)
  frontend-ci:
    name: Frontend CI - Next.js Apps
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'frontend-only' || github.event.inputs.test_scope == '' }}
    
    strategy:
      matrix:
        app: [chartering, registers, home, accounting, voyagemanager, auth]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          frontend/package-lock.json
              
    - name: Install frontend workspace dependencies
      run: npm ci
      working-directory: ./frontend
      
    - name: Lint ${{ matrix.app }} app
      run: |
        # Check if linting configuration exists for the app
        if npx nx show project ${{ matrix.app }} | grep -q "lint"; then
          npx nx lint ${{ matrix.app }}
        else
          echo "No lint configuration found for ${{ matrix.app }}, skipping..."
        fi
      working-directory: ./frontend
      continue-on-error: true
      
    - name: Build ${{ matrix.app }} app
      run: npx nx build ${{ matrix.app }} --configuration=production
      working-directory: ./frontend
      
    - name: Run ${{ matrix.app }} tests
      run: |
        # Run specific tests for the app if they exist
        if [ -d "apps/${{ matrix.app }}/__tests__" ] || [ -d "apps/${{ matrix.app }}/src/__tests__" ]; then
          npm run test:${{ matrix.app }}
        else
          npx nx test ${{ matrix.app }} --passWithNoTests --watchAll=false
        fi
      working-directory: ./frontend
      continue-on-error: true
      
    - name: Upload ${{ matrix.app }} build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-${{ matrix.app }}-build
        path: |
          frontend/apps/${{ matrix.app }}/.next/
          frontend/apps/${{ matrix.app }}/out/
          frontend/apps/${{ matrix.app }}/dist/
        retention-days: 1

  # Job 3: Security and Quality Checks
  security-quality:
    name: Security & Quality Checks
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: ${{ github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == 'security-only' || github.event.inputs.test_scope == '' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js for security scan
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install root dependencies
      run: npm ci
      
    - name: Install frontend dependencies
      run: npm ci
      working-directory: ./frontend
      
    - name: Run npm audit
      run: |
        echo "Running npm audit for root package..."
        npm audit --audit-level=high || true
        echo "Running npm audit for frontend workspace..."
        cd frontend && npm audit --audit-level=high || true
      continue-on-error: true
      
    - name: Setup .NET for backend security scan
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Run .NET security scan
      run: |
        dotnet list package --outdated
        dotnet list package --vulnerable
      working-directory: ./backend/ShipnetFunctionApp
      continue-on-error: true

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci]
    if: ${{ (github.event.inputs.test_scope == 'all' || github.event.inputs.test_scope == '') && github.event.inputs.skip_integration_tests != 'true' }}
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: Commercial
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download backend artifacts
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: ./backend/ShipnetFunctionApp/
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup test database
      run: |
        sudo apt-get update
        sudo apt-get install --yes postgresql-client
        PGPASSWORD=postgres psql -h 10.91.20.72 -U postgres -d Commercial -c "CREATE SCHEMA IF NOT EXISTS public;"
      env:
        PGPASSWORD: postgres
        
    - name: Run integration tests
      run: dotnet test --configuration Release --logger trx --results-directory TestResults
      working-directory: ./backend/ShipnetFunctionApp
      env:
        ConnectionStrings__DefaultConnection: "Host=10.91.20.72;Database=Commercial;Username=postgres;Password=postgres"
      continue-on-error: true

  # Job 5: Build Summary and Notifications
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-ci, frontend-ci, security-quality, integration-tests]
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Create build summary
      run: |
        echo "# üöÄ Shipnet 2.0 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Backend Status" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Functions Build: ${{ needs.backend-ci.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Frontend Status" >> $GITHUB_STEP_SUMMARY
        echo "- Next.js Apps Build: ${{ needs.frontend-ci.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Quality & Security" >> $GITHUB_STEP_SUMMARY
        echo "- Security Scan: ${{ needs.security-quality.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build Time:** $(date)" >> $GITHUB_STEP_SUMMARY

    - name: Notify on failure
      if: ${{ needs.backend-ci.result == 'failure' || needs.frontend-ci.result == 'failure' }}
      run: |
        echo "‚ùå CI Pipeline Failed!"
        echo "Please check the logs above for detailed error information."
        exit 1
        
    - name: Success notification
      if: ${{ needs.backend-ci.result == 'success' && needs.frontend-ci.result == 'success' }}
      run: |
        echo "‚úÖ CI Pipeline Completed Successfully!"
        echo "All builds passed and artifacts are ready for deployment."
