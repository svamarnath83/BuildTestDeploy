// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShipnetFunctionApp.Data;

#nullable disable

namespace ShipnetFunctionApp.Data.Migrations.TenantMigrations
{
    [DbContext(typeof(MultiTenantSnContext))]
    [Migration("20250825042405_seedDataAdded")]
    partial class seedDataAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("commodities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CRUDE",
                            IsActive = true,
                            Name = "Crude Oil"
                        },
                        new
                        {
                            Id = 2,
                            Code = "MGO",
                            IsActive = true,
                            Name = "Marine Gas Oil"
                        },
                        new
                        {
                            Id = 3,
                            Code = "VLSFO",
                            IsActive = true,
                            Name = "Very Low Sulfur Fuel Oil"
                        },
                        new
                        {
                            Id = 4,
                            Code = "IRONORE",
                            IsActive = true,
                            Name = "Iron Ore"
                        },
                        new
                        {
                            Id = 5,
                            Code = "COAL",
                            IsActive = true,
                            Name = "Thermal Coal"
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.ConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("category");

                    b.Property<string>("ConfigType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("config_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("group_name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("source");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sub_category");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("configurations", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("currencytype", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "EUR",
                            IsActive = true,
                            Name = "Euro"
                        },
                        new
                        {
                            Id = 2,
                            Code = "GBP",
                            IsActive = true,
                            Name = "British Pound"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CHF",
                            IsActive = true,
                            Name = "Swiss Franc"
                        },
                        new
                        {
                            Id = 4,
                            Code = "NOK",
                            IsActive = true,
                            Name = "Norwegian Krone"
                        },
                        new
                        {
                            Id = 5,
                            Code = "SEK",
                            IsActive = true,
                            Name = "Swedish Krona"
                        },
                        new
                        {
                            Id = 6,
                            Code = "DKK",
                            IsActive = true,
                            Name = "Danish Krone"
                        },
                        new
                        {
                            Id = 7,
                            Code = "PLN",
                            IsActive = true,
                            Name = "Polish Zloty"
                        },
                        new
                        {
                            Id = 8,
                            Code = "CZK",
                            IsActive = true,
                            Name = "Czech Koruna"
                        },
                        new
                        {
                            Id = 9,
                            Code = "JPY",
                            IsActive = true,
                            Name = "Japanese Yen"
                        },
                        new
                        {
                            Id = 10,
                            Code = "CNY",
                            IsActive = true,
                            Name = "Chinese Yuan"
                        },
                        new
                        {
                            Id = 11,
                            Code = "INR",
                            IsActive = true,
                            Name = "Indian Rupee"
                        },
                        new
                        {
                            Id = 12,
                            Code = "KRW",
                            IsActive = true,
                            Name = "South Korean Won"
                        },
                        new
                        {
                            Id = 13,
                            Code = "SGD",
                            IsActive = true,
                            Name = "Singapore Dollar"
                        },
                        new
                        {
                            Id = 14,
                            Code = "THB",
                            IsActive = true,
                            Name = "Thai Baht"
                        },
                        new
                        {
                            Id = 15,
                            Code = "MYR",
                            IsActive = true,
                            Name = "Malaysian Ringgit"
                        },
                        new
                        {
                            Id = 16,
                            Code = "IDR",
                            IsActive = true,
                            Name = "Indonesian Rupiah"
                        },
                        new
                        {
                            Id = 17,
                            Code = "AED",
                            IsActive = true,
                            Name = "UAE Dirham"
                        },
                        new
                        {
                            Id = 18,
                            Code = "SAR",
                            IsActive = true,
                            Name = "Saudi Riyal"
                        },
                        new
                        {
                            Id = 19,
                            Code = "QAR",
                            IsActive = true,
                            Name = "Qatari Riyal"
                        },
                        new
                        {
                            Id = 20,
                            Code = "KWD",
                            IsActive = true,
                            Name = "Kuwaiti Dinar"
                        },
                        new
                        {
                            Id = 21,
                            Code = "USD",
                            IsActive = true,
                            Name = "US Dollar"
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.DistanceSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("distance");

                    b.Property<string>("FromPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fromport");

                    b.Property<string>("ToPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("toport");

                    b.Property<string>("xmldata")
                        .HasColumnType("text")
                        .HasColumnName("xmldata");

                    b.HasKey("Id");

                    b.ToTable("sndistance", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Estimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Commodity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("commodity");

                    b.Property<string>("DischargePorts")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dischargeports");

                    b.Property<DateTime?>("EstimateDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("estimatedate");

                    b.Property<string>("EstimateNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estimateno");

                    b.Property<string>("LoadPorts")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("loadports");

                    b.Property<string>("Ship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ship");

                    b.Property<string>("ShipAnalysis")
                        .HasColumnType("text")
                        .HasColumnName("shipanalysis");

                    b.Property<string>("ShipType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("shiptype");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<string>("VoyageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voyageno");

                    b.HasKey("Id");

                    b.ToTable("estimates", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<bool>("InUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("inuse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("grade", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7622),
                            InUse = true,
                            Name = "HSFO",
                            Price = 45m
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7626),
                            InUse = true,
                            Name = "MGO",
                            Price = 34m
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7629),
                            InUse = true,
                            Name = "VLSFO",
                            Price = 89m
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Ishistorical")
                        .HasColumnType("boolean")
                        .HasColumnName("ishistorical");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PortCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("portcode");

                    b.Property<string>("Unctad")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unctad");

                    b.Property<string>("additionaldata")
                        .HasColumnType("text")
                        .HasColumnName("additionaldata");

                    b.Property<string>("ets")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ets");

                    b.Property<string>("netpasCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("netpascode");

                    b.Property<int>("rankOrder")
                        .HasColumnType("integer")
                        .HasColumnName("rankorder");

                    b.HasKey("Id");

                    b.ToTable("ports", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("unitsofmeasure", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "C",
                            IsActive = true,
                            Name = "CUBIC"
                        },
                        new
                        {
                            Id = 2,
                            Code = "L",
                            IsActive = true,
                            Name = "LONG TON"
                        },
                        new
                        {
                            Id = 3,
                            Code = "M",
                            IsActive = true,
                            Name = "METRIC TON"
                        },
                        new
                        {
                            Id = 4,
                            Code = "S",
                            IsActive = true,
                            Name = "SHORT TON"
                        },
                        new
                        {
                            Id = 5,
                            Code = "LM",
                            IsActive = true,
                            Name = "LUMPSUM"
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id");

                    b.ToTable("vesselcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7412),
                            IsActive = true,
                            Name = "Bulk Carrier"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7434),
                            IsActive = true,
                            Name = "Tanker"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7436),
                            IsActive = true,
                            Name = "Container"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7438),
                            IsActive = true,
                            Name = "Gas Carrier"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7440),
                            IsActive = true,
                            Name = "General Cargo"
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint")
                        .HasColumnName("gradeid");

                    b.Property<string>("GradeName")
                        .HasColumnType("text")
                        .HasColumnName("gradename");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sortorder");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int>("UomId")
                        .HasColumnType("integer")
                        .HasColumnName("uomid");

                    b.Property<long>("vesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vesselid");

                    b.HasKey("Id");

                    b.ToTable("vesselgrades", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GradeId = 1L,
                            GradeName = "HSFO",
                            SortOrder = 1,
                            Type = "primary",
                            UomId = 3,
                            vesselId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            GradeId = 2L,
                            GradeName = "MGO",
                            SortOrder = 2,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            GradeId = 3L,
                            GradeName = "VLSFO",
                            SortOrder = 3,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            GradeId = 1L,
                            GradeName = "HSFO",
                            SortOrder = 1,
                            Type = "primary",
                            UomId = 3,
                            vesselId = 2L
                        },
                        new
                        {
                            Id = 5L,
                            GradeId = 2L,
                            GradeName = "MGO",
                            SortOrder = 2,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 2L
                        },
                        new
                        {
                            Id = 6L,
                            GradeId = 3L,
                            GradeName = "VLSFO",
                            SortOrder = 3,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 2L
                        },
                        new
                        {
                            Id = 7L,
                            GradeId = 1L,
                            GradeName = "HSFO",
                            SortOrder = 1,
                            Type = "primary",
                            UomId = 3,
                            vesselId = 3L
                        },
                        new
                        {
                            Id = 8L,
                            GradeId = 2L,
                            GradeName = "MGO",
                            SortOrder = 2,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 3L
                        },
                        new
                        {
                            Id = 9L,
                            GradeId = 3L,
                            GradeName = "VLSFO",
                            SortOrder = 3,
                            Type = "secondary",
                            UomId = 3,
                            vesselId = 3L
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CalcType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("calctype");

                    b.Property<int?>("Category")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id");

                    b.ToTable("vesseltypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3L,
                            CalcType = "Weight",
                            Category = 3,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7810),
                            CreatedBy = 3,
                            IsActive = true,
                            Name = "Tanker",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7813),
                            UpdatedBy = 3
                        },
                        new
                        {
                            Id = 4L,
                            CalcType = "Count",
                            Category = 4,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7817),
                            CreatedBy = 4,
                            IsActive = true,
                            Name = "RoRo",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7818),
                            UpdatedBy = 4
                        },
                        new
                        {
                            Id = 5L,
                            CalcType = "Volume",
                            Category = 5,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7821),
                            CreatedBy = 5,
                            IsActive = true,
                            Name = "LNG Carrier",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7822),
                            UpdatedBy = 5
                        },
                        new
                        {
                            Id = 6L,
                            CalcType = "Weight",
                            Category = 6,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7825),
                            CreatedBy = 6,
                            IsActive = true,
                            Name = "General Cargo",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7826),
                            UpdatedBy = 6
                        },
                        new
                        {
                            Id = 7L,
                            CalcType = "Count",
                            Category = 7,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7829),
                            CreatedBy = 7,
                            IsActive = true,
                            Name = "Passenger Ship",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7829),
                            UpdatedBy = 7
                        },
                        new
                        {
                            Id = 8L,
                            CalcType = "Weight",
                            Category = 8,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7832),
                            CreatedBy = 8,
                            IsActive = false,
                            Name = "Heavy Lift",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7833),
                            UpdatedBy = 8
                        },
                        new
                        {
                            Id = 9L,
                            CalcType = "Volume",
                            Category = 9,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7836),
                            CreatedBy = 9,
                            IsActive = true,
                            Name = "Reefer",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7837),
                            UpdatedBy = 9
                        },
                        new
                        {
                            Id = 10L,
                            CalcType = "Weight",
                            Category = 10,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7840),
                            CreatedBy = 10,
                            IsActive = false,
                            Name = "Chemical Tanker",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7841),
                            UpdatedBy = 10
                        },
                        new
                        {
                            Id = 1L,
                            CalcType = "per_ton",
                            Category = 1,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7844),
                            CreatedBy = 1,
                            IsActive = true,
                            Name = "Bulk Carrier",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7845),
                            UpdatedBy = 1
                        },
                        new
                        {
                            Id = 2L,
                            CalcType = "per_day",
                            Category = 2,
                            CreatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7848),
                            CreatedBy = 2,
                            IsActive = true,
                            Name = "Container Ship",
                            UpdatedAt = new DateTime(2025, 8, 25, 9, 54, 5, 250, DateTimeKind.Local).AddTicks(7849),
                            UpdatedBy = 2
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Vessels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<int?>("Dwt")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("dwt");

                    b.Property<int?>("IMO")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("imo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("RunningCost")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("runningcost");

                    b.Property<long?>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("bigint")
                        .HasColumnName("type");

                    b.Property<string>("vesseljson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vesseljson");

                    b.HasKey("Id");

                    b.ToTable("vessels", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "V001",
                            Dwt = 199000,
                            IMO = 9876543,
                            Name = "Aurora Star",
                            RunningCost = 199744,
                            Type = 1L,
                            vesseljson = "{\"speedConsumptions\":[{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":67,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":34,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":54,\"isDefault\":false},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":34,\"isDefault\":true},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":67,\"isDefault\":true},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":89,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":76,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":78,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":65,\"isDefault\":true}]}"
                        },
                        new
                        {
                            Id = 2L,
                            Code = "V005",
                            Dwt = 198700,
                            IMO = 9701234,
                            Name = "Blue Horizon",
                            RunningCost = 689909,
                            Type = 2L,
                            vesseljson = "{\"speedConsumptions\":[{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":67,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":34,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":54,\"isDefault\":false},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":34,\"isDefault\":true},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":67,\"isDefault\":true},{\"id\":2,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":89,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":76,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":78,\"isDefault\":true},{\"id\":3,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":65,\"isDefault\":true}]}"
                        },
                        new
                        {
                            Id = 3L,
                            Code = "V0019",
                            Dwt = 200000,
                            IMO = 1234567,
                            Name = "Aqua Nova",
                            RunningCost = 5465,
                            Type = 1L,
                            vesseljson = "{\"speedConsumptions\":[{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":45,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":2,\"gradeName\":\"VLSFO\",\"consumption\":87,\"isDefault\":false},{\"id\":1,\"speed\":\"\",\"mode\":\"port\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":76,\"isDefault\":false},{\"id\":2,\"speed\":\"45\",\"mode\":\"ballast\",\"gradeId\":1,\"gradeName\":\"HSFO\",\"consumption\":78,\"isDefault\":false},{\"id\":2,\"speed\":\"45\",\"mode\":\"ballast\",\"gradeId\":2,\"gradeName\":\"MGO\",\"consumption\":65,\"isDefault\":false},{\"id\":2,\"speed\":\"45\",\"mode\":\"ballast\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":45,\"isDefault\":false},{\"id\":3,\"speed\":\"45\",\"mode\":\"laden\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":87,\"isDefault\":false},{\"id\":4,\"speed\":\"34\",\"mode\":\"laden\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":56,\"isDefault\":true},{\"id\":5,\"speed\":\"34\",\"mode\":\"ballast\",\"gradeId\":3,\"gradeName\":\"VLSFO\",\"consumption\":65,\"isDefault\":true}]}"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
