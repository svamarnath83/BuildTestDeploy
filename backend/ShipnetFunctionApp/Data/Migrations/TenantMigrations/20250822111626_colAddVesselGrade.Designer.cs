// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShipnetFunctionApp.Data;

#nullable disable

namespace ShipnetFunctionApp.Data.Migrations.TenantMigrations
{
    [DbContext(typeof(MultiTenantSnContext))]
    [Migration("20250822111626_colAddVesselGrade")]
    partial class colAddVesselGrade
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Commodity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("commodities", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.ConfigSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("category");

                    b.Property<string>("ConfigType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("config_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<string>("GroupName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("group_name");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Source")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("source");

                    b.Property<string>("SubCategory")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("sub_category");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("configurations", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.CurrencyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("currencytype", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.DistanceSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("distance");

                    b.Property<string>("FromPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fromport");

                    b.Property<string>("ToPort")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("toport");

                    b.Property<string>("xmldata")
                        .HasColumnType("text")
                        .HasColumnName("xmldata");

                    b.HasKey("Id");

                    b.ToTable("sndistance", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Estimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Commodity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("commodity");

                    b.Property<string>("DischargePorts")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dischargeports");

                    b.Property<DateTime?>("EstimateDate")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("estimatedate");

                    b.Property<string>("EstimateNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("estimateno");

                    b.Property<string>("LoadPorts")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("loadports");

                    b.Property<string>("Ship")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("ship");

                    b.Property<string>("ShipAnalysis")
                        .HasColumnType("text")
                        .HasColumnName("shipanalysis");

                    b.Property<string>("ShipType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("shiptype");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("status");

                    b.Property<string>("VoyageNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("voyageno");

                    b.HasKey("Id");

                    b.ToTable("estimates", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdat");

                    b.Property<bool>("InUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("inuse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedat");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("grade", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3221),
                            InUse = true,
                            Name = "HSFO",
                            Price = 45m
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3225),
                            InUse = true,
                            Name = "MGO",
                            Price = 34m
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3228),
                            InUse = true,
                            Name = "VLSFO",
                            Price = 89m
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Port", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<bool?>("Ishistorical")
                        .HasColumnType("boolean")
                        .HasColumnName("ishistorical");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PortCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("portcode");

                    b.Property<string>("Unctad")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unctad");

                    b.Property<string>("additionaldata")
                        .HasColumnType("text")
                        .HasColumnName("additionaldata");

                    b.Property<string>("ets")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ets");

                    b.Property<string>("netpasCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("netpascode");

                    b.Property<int>("rankOrder")
                        .HasColumnType("integer")
                        .HasColumnName("rankorder");

                    b.HasKey("Id");

                    b.ToTable("ports", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.UnitOfMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("unitsofmeasure", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.HasKey("Id")
                        .HasName("id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id");

                    b.ToTable("vesselcategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(2982),
                            IsActive = true,
                            Name = "Bulk Carrier"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3010),
                            IsActive = true,
                            Name = "Tanker"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3012),
                            IsActive = true,
                            Name = "Container"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3014),
                            IsActive = true,
                            Name = "Gas Carrier"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 8, 22, 16, 46, 26, 29, DateTimeKind.Local).AddTicks(3016),
                            IsActive = true,
                            Name = "General Cargo"
                        });
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselGrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint")
                        .HasColumnName("gradeid");

                    b.Property<string>("GradeName")
                        .HasColumnType("text")
                        .HasColumnName("gradename");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer")
                        .HasColumnName("sortorder");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<int>("UomId")
                        .HasColumnType("integer")
                        .HasColumnName("uomid");

                    b.Property<long>("vesselId")
                        .HasColumnType("bigint")
                        .HasColumnName("vesselid");

                    b.HasKey("Id");

                    b.ToTable("vesselgrades", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.VesselType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CalcType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("calctype");

                    b.Property<int?>("Category")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("createdate");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("createdby");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updatedate");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("updatedby");

                    b.HasKey("Id");

                    b.ToTable("vesseltypes", (string)null);
                });

            modelBuilder.Entity("ShipnetFunctionApp.Data.Models.Vessels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<int?>("Dwt")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("dwt");

                    b.Property<int?>("IMO")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("imo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("RunningCost")
                        .HasMaxLength(100)
                        .HasColumnType("integer")
                        .HasColumnName("runningcost");

                    b.Property<long?>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("bigint")
                        .HasColumnName("type");

                    b.Property<string>("vesseljson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vesseljson");

                    b.HasKey("Id");

                    b.ToTable("vessels", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
